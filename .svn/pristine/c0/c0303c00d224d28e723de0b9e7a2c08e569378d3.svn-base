package com.vip.apitest.luxury.vlife;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.path.json.JsonPath.with;
import static com.jayway.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchema;
import static org.hamcrest.Matchers.equalTo;

import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;

import org.junit.Before;
import org.junit.Test;
import org.unitils.reflectionassert.ReflectionAssert;

import com.jayway.restassured.RestAssured;
import com.vip.apitest.luxury.BaseTestCase;
import com.vip.apitest.luxury.common.CommonMethod;
import com.vip.apitest.luxury.vlife.Object.RecommendHomeDO;
import com.vip.apitest.utility.MD5Encoder;

public class RecommendHomeTest extends BaseTestCase{
	
	@Before
	public void setUp(){
		RestAssured.baseURI = "http://mapp.vipfashion.com/oi";
		RestAssured.port = 80;
		
	}

	/**
	 * 获取推荐的图片、视频
	 * 正例
	 * 校验schema
	 * 
	 */
	@Test
	public void testRecommendHome() throws NoSuchAlgorithmException{
		InputStream jsonschema = Thread.currentThread().getContextClassLoader().getResourceAsStream("json/recommend_home.json");
		String sign = MD5Encoder.encodeByMD5("recommend" + "home" + "viplux#123@", MessageDigest.getInstance("MD5"));
        given().
            params("sign", sign).
            params("appid", CommonMethod.appid).
        when().
            get("/recommend/home/").
        then().
			statusCode(200).
			body("code", equalTo(1)).
			body(matchesJsonSchema(jsonschema));
	}
	
	/**
	 * 获取推荐的图片、视频
	 * 正例
	 * 返回图片+视频
	 * 
	 */
	@Test
	public void testRecommendHome_01() throws NoSuchAlgorithmException{
		dataSetVipfashion.initDataSet("src/test/java/com/vip/apitest/luxury/vlife/dataset/BrandHome.xml");
		String sign = MD5Encoder.encodeByMD5("recommend" + "home" + "viplux#123@", MessageDigest.getInstance("MD5"));
        String str = given().
            params("sign", sign).
            params("appid", CommonMethod.appid).
        when().
            get("/recommend/home/").asString();

        RecommendHomeDO[] recommendHomeDO=with(str).getObject("data", RecommendHomeDO[].class);
//        ReflectionAssert.assertLenientEquals(3, recommendHomeDO.length);
	}
	
//	/**
//	 * 获取推荐的图片、视频
//	 * 正例
//	 * 只返回图片
//	 * 
//	 */
//	@Test
//	public void testRecommendHome02() throws NoSuchAlgorithmException{
//		String sign = MD5Encoder.encodeByMD5("recommend" + "home" + "viplux#123@", MessageDigest.getInstance("MD5"));
//        String str = given().
//            params("sign", sign).
//            params("appid", CommonMethod.appid).
//        when().
//            get("/recommend/home/").prettyPrint();
//
//        RecommendHomeDO[] recommendHomeDO=with(str).getObject("data",  RecommendHomeDO[].class);
//        ReflectionAssert.assertLenientEquals(recommendHomeDO, recommendHomeDO);
//	}
//	
//	/**
//	 * 获取推荐的图片、视频
//	 * 正例
//	 * 只返回视频
//	 * 
//	 */
//	@Test
//	public void testRecommendHome03() throws NoSuchAlgorithmException{
//		String sign = MD5Encoder.encodeByMD5("recommend" + "home" + "viplux#123@", MessageDigest.getInstance("MD5"));
//        String str = given().
//            params("sign", sign).
//            params("appid", CommonMethod.appid).
//        when().
//            get("/recommend/home/").prettyPrint();
//
//        ArrayList<RecommendHomeDO> results=(ArrayList<RecommendHomeDO>) with(str).getList("data", RecommendHomeDO.class);
//        ReflectionAssert.assertLenientEquals(results, results);
//	}
}
