package com.vip.apitest.luxury.vlife;

import static com.jayway.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;

import org.databene.benerator.anno.Source;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

import com.vip.apitest.luxury.BaseTestCase;
import com.vip.apitest.luxury.common.CommonMethod;
import com.vip.apitest.utility.GetDate;
import com.vip.apitest.utility.MD5Encoder;
import com.vip.apitest.utility.db.JDBCTemplateFactory;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class OfflineCartTest extends BaseTestCase {
	
	 @BeforeClass
		public static void init() throws Exception{
			dataSetVipfashion.initDataSet("src/test/resources/data/vlife/offlineCart_data.xml");
			CommonMethod.getUidAndToken();
		}
	
	@Test
	public void testOfflineCartAtion_right() throws NoSuchAlgorithmException{
		System.out.println("到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", CommonMethod.token).
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(1)).
			body("data", equalTo("操作成功!"));
	}
	
	@Test
	@Source("data/vlife/offline_cart_error.csv")
	public void testOfflineCartAtion_error(String testName, String shop_id, String sku_id, String uid, int code, String msg) throws NoSuchAlgorithmException{
		System.out.println(testName);
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", shop_id).
			params("sku_id", sku_id).
			params("uid", uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", CommonMethod.token).
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(code)).
			body("msg", equalTo(msg));
	}

	@Test
	public void testOfflineCartAtion_tokenIsEmpty() throws NoSuchAlgorithmException{
		System.out.println("token为空时到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", "").
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(0)).
			body("msg", equalTo("token为空"));
	}
	
	@Test
	public void testOfflineCartAtion_tokenIsSpace() throws NoSuchAlgorithmException{
		System.out.println("token传空格时到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", " ").
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(0)).
			body("msg", equalTo("token为空"));
	}
	
	@Test
	public void testOfflineCartAtion_tokenIsSpecial() throws NoSuchAlgorithmException{
		System.out.println("token传特殊字符时到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", "*—……￥—……%##**—&*^%&#").
		when().
			get(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(0)).
			body("msg", equalTo("token错误"));
	}
	
	@Test
	public void testOfflineCartAtion_tokenIsNull() throws NoSuchAlgorithmException{
		System.out.println("token传null时到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", "null").
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(0)).
			body("msg", equalTo("token错误"));
	}
	
	@Test
	public void testOfflineCartAtion_tokenIsTrue() throws NoSuchAlgorithmException{
		System.out.println("token传true时到店预约购物车更新接口");
		String sign = MD5Encoder.encodeByMD5("offline" + "cart" + "viplux#123@", MessageDigest.getInstance("MD5"));
		
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("shop_id", "1").
			params("sku_id", "3").
			params("uid", CommonMethod.uid).
			params("subscribe_time", GetDate.getDate(1)).
			params("token", "true").
		when().
			post(CommonMethod.vlife_uri+"/offline/cart/").
		then().
			statusCode(200).
			body("code", equalTo(0)).
			body("msg", equalTo("token错误"));
	}
	
	@AfterClass
	public static void afterClass() throws SQLException{
		JDBCTemplateFactory.VIPLUX_TEST.execute("delete from user_cart where shop_id = '1' and sku_id = '3';");
		JDBCTemplateFactory.VIPLUX_TEST.getDataSource().getConnection().close();
	}
}
