package com.vip.apitest.luxury.magento;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.path.json.JsonPath.with;
import static com.jayway.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchema;
import static org.hamcrest.Matchers.*;


import com.vip.apitest.luxury.common.CommonMethod;
import junit.framework.Assert;
import org.junit.Test;
import com.vip.apitest.luxury.common.User;
import java.util.List;

/**
 * Created by Administrator on 2014/6/26.
 */
public class UserFavoriteTest {

    @Test
    public void testGetFavorite() throws Exception {
        User user = CommonMethod.login();

        given().
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
                when().
                get("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().
                body("code", equalTo(1));

    }

    @Test
    public void testGetFavoriteWithInvalidUser() throws Exception {
        //User user = CommonMethod.login();
        String invalidToken = "kdlfjsdojo349320r4";
        String invalidUserId = "-1";

        given().
                header("accesstoken", invalidToken).
                header("Content-Type", "application/json; charset=utf-8").
                when().
                get("http://shop-mapp.vipfashion.com/api/rest/customers/" + invalidUserId + "/favorites").
        then().
                body("code", equalTo(12306));
    }

    @Test
    public void testUserHasNoFavorite() throws Exception {
        User user = CommonMethod.registerNewUser();

        given().
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
                when().
                get("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
                then().
                body("code", equalTo(60002));
    }

    @Test
    public void testAddFavoriteWithInvalidUserId() throws Exception{
        //User user = CommonMethod.login();
        List<Integer> productList = CommonMethod.getProductIds("", "", "configurable");

        String requestStr = "{";
        requestStr += "\"" + "product_id" + "\":" + "\"" + productList.get(0) + "\"";
        requestStr += "}";

        String invalidUserId = "000000000";
        String invalidToken = "00980998sdfa";
        given().
                request().
                body(requestStr).
                header("accesstoken", invalidToken).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                post("http://shop-mapp.vipfashion.com/api/rest/customers/" + invalidUserId + "/favorites").
        then().
                body("code", equalTo(12306));
    }

    @Test
    public void testAddFavoriteWithInvalidToken() throws Exception{
        User user = CommonMethod.login();
        List<Integer> productList = CommonMethod.getProductIds("", "", "configurable");

        String requestStr = "{";
        requestStr += "\"" + "product_id" + "\":" + "\"" + productList.get(0) + "\"";
        requestStr += "}";

        String invalidUserId = "98304u30954sdfsfklm";
        given().
                request().
                body(requestStr).
                header("accesstoken", invalidUserId).
                header("Content-Type", "application/json; charset=utf-8").
         when().
                post("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().
                body("code", equalTo(12306));
    }

    @Test
    public void testAddFavoriteWithInvalidProductId() throws Exception{
        User user = CommonMethod.login();
        String invalidId = "00000";
        String requestStr = "{";
        requestStr += "\"" + "product_id" + "\":" + "\"" + invalidId + "\"";
        requestStr += "}";

        given().
                request().
                body(requestStr).
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                post("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().
                body("code", equalTo(60001));
    }

    @Test
    public void testAddMultiProductsToFavorite() throws Exception {
        System.out.println("there is a bug to be fixed");
        User user = CommonMethod.registerNewUser();
        //List<Integer> productList = CommonMethod.getProductIds("", "", "configurable");
        Integer [] productList = {3, 7, 10};

        for(int i = 0; i < 3; ++i) {
            String requestStr = "{";
            requestStr += "\"" + "product_id" + "\":" + "\"" + productList[i] + "\"";
            requestStr += "}";

            given().
                    request().
                    body(requestStr).
                    header("accesstoken", user.token).
                    header("Content-Type", "application/json; charset=utf-8").
            when().
                    post("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
            then().
                    body("code", equalTo(1));
        }

        String getFavorite = given().
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
                when().
                get("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").asString();

        List<String> list = with(getFavorite).getList("data.products.id");

        for(int i = 0; i < 3; ++i){
            Assert.assertEquals(productList[i].toString(), list.get(i));
        }

    }

    @Test
    public void testDeleteFavorite() throws Exception{
        User user = CommonMethod.login();
        List<Integer> productList = CommonMethod.getProductIds("", "", "configurable");

        // add 3 products to favorite
        for(int i = 0; i < 3 && i < productList.size(); ++i) {
            String requestStr = "{";
            requestStr += "\"" + "product_id" + "\":" + "\"" + productList.get(i) + "\"";
            requestStr += "}";

            System.out.println(requestStr);

            given().
                    request().
                    body(requestStr).
                    header("accesstoken", user.token).
                    header("Content-Type", "application/json; charset=utf-8").
                    when().
                    post("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
                    then().
                    body("code", equalTo(1));
        }

        // get favorite list
        String responseStr = given().
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                get("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").prettyPrint();

        List<String> favoriteList = with(responseStr).getList("data.products.entity_id");
        String productToDelete = favoriteList.get(0);

        String request = "{";
        request += "\"" + "products" + "\":" + "[" + productToDelete + "]";
        request += "}";
        System.out.println(request);

        given().
                request().
                body(request).
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                delete("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().
                statusCode(207);
    }

    @Test
    public void testDeleteFavoriteWithInvalidUserId() throws Exception{
        //User user = CommonMethod.login();
        String invalidUserId = "001";
        String invalidUserToken = "93042340xjf";

        String request = "{";
        request += "\"" + "products" + "\":" + "[" + "12" + "]";
        request += "}";
        System.out.println(request);

        given().
                request().
                body(request).
                header("accesstoken", invalidUserToken).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                delete("http://shop-mapp.vipfashion.com/api/rest/customers/" + invalidUserId + "/favorites").
        then().
                body("code", equalTo(12306));
    }

    @Test
    public void testDeleteFavoriteWithInvalidToken() throws Exception{
        System.out.print("there is a bug to be fixed");
        User user = CommonMethod.login();
        String invalidToken = "9342389u72935932kl";

        String request = "{";
        request += "\"" + "products" + "\":" + "[" + "12" + "]";
        request += "}";
        System.out.println(request);

        given().
                request().
                body(request).
                header("accesstoken", invalidToken).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                delete("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().
                body("code", equalTo(12306));
    }

    @Test
    public void testDeleteFavoriteWithInvalidProudct() throws Exception{
        System.out.println("Bug 27934: errorCode shall return if try to delete an invalid product");
        User user = CommonMethod.login();

        String invalidProduct = "83942394793492";
        String request = "{";
        request += "\"" + "products" + "\":" + "[" + invalidProduct + "]";
        request += "}";
        System.out.println(request);

        given().
                request().
                body(request).
                header("accesstoken", user.token).
                header("Content-Type", "application/json; charset=utf-8").
        when().
                delete("http://shop-mapp.vipfashion.com/api/rest/customers/" + user.userId + "/favorites").
        then().statusCode(207);
    }

    /*
        only to get product list
     */
//    @Test
//    public void printAllProducts() throws Exception{
//        List<String> brandList = CommonMethod.getBrandIds();
//
//        for(int i = 0; i < brandList.size(); ++i) {
//            List<String> simple = CommonMethod.getProductIds("", brandList.get(i), "simple");
//            List<String> configurable = CommonMethod.getProductIds("", brandList.get(i), "configurable");
//            List<String> bundle = CommonMethod.getProductIds("", brandList.get(i), "bundle");
//
//            System.out.println(simple);
//            System.out.println(configurable);
//            System.out.println(bundle);
//        }
//    }
}