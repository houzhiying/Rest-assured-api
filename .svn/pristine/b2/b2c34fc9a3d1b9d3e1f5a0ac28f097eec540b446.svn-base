package com.vip.apitest.luxury.vlife;

import static com.jayway.restassured.RestAssured.given;
import static com.jayway.restassured.module.jsv.JsonSchemaValidator.matchesJsonSchema;
import static org.hamcrest.Matchers.equalTo;

import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.SQLException;

import org.databene.benerator.anno.Source;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.vip.apitest.luxury.BaseTestCase;
import com.vip.apitest.luxury.common.CommonMethod;
import com.vip.apitest.utility.MD5Encoder;
import com.vip.apitest.utility.db.JDBCTemplateFactory;

public class OfflineOrderTest extends BaseTestCase {
	 
	 @BeforeClass
		public static void init() throws Exception{
			try {
				CommonMethod.getUidAndToken();
				CommonMethod.OfflineSubscribeAdd("1", "2014-06-11");
			} catch (NoSuchAlgorithmException e) {
				e.printStackTrace();
			}
		}
	
	
	@Test
	public void testOfflineOrderAtion_right() throws NoSuchAlgorithmException{
		System.out.println("根据UID查看预约单信息");
		InputStream jsonSchema = Thread.currentThread().getContextClassLoader().getResourceAsStream("json/offline_order.json");
		String sign = MD5Encoder.encodeByMD5("offline" + "order" + "viplux#123@", MessageDigest.getInstance("MD5"));
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("type", "0").
			params("uid", CommonMethod.uid).
			params("token", CommonMethod.token).
		when().
			get(CommonMethod.vlife_uri+"/offline/order/").
		then().
			statusCode(200).
			body("code", equalTo(1)).
			body(matchesJsonSchema(jsonSchema));
	}
	
	@Test
	@Source("data/vlife/offline_order_error.csv")
	public void testOfflineOrderAtion_error(String testName, String type, String uid, int code, String msg) throws NoSuchAlgorithmException{
		System.out.println(testName);
		String sign = MD5Encoder.encodeByMD5("offline" + "order" + "viplux#123@", MessageDigest.getInstance("MD5"));
		given().
			params("sign", sign).
			params("appid", CommonMethod.appid).
			params("uid", uid).
			params("type", type).
			params("token", CommonMethod.token).
		when().
			get(CommonMethod.vlife_uri+"/offline/order/").
		then().
			statusCode(200).
			body("code", equalTo(code)).
			body("msg", equalTo(msg));
	}
	
	@AfterClass
	public static void afterClass() throws SQLException{
		JDBCTemplateFactory.VIPLUX_TEST.execute("delete from user_subscribe where cart_id = '1';");
		JDBCTemplateFactory.VIPLUX_TEST.getDataSource().getConnection().close();
	}
}
